using SearchLight
using Genie
using SearchLightPostgreSQL

# --- Set up connections ---
# autogenerated at startup instead of using connection.yml as we want these to be
# secrets!!

config = Dict(
    "adapter" => "PostgreSQL",
    "host" => get(ENV, "POSTGRES_HOST", "db"),
    "port" => parse(Int, get(ENV, "POSTGRES_PORT", "5432")),
    "database" => ENV["POSTGRES_DB"],
    "username" => ENV["POSTGRES_USER"],
    "password" => ENV["POSTGRES_PASSWORD"],
    "options"  => Dict{String,String}(),
    "config"   => nothing
)


# --- Loads the DB ---
function Genie.Renderer.Json.JSON3.StructTypes.StructType(
    ::Type{T},
) where {T<:SearchLight.AbstractModel}
    Genie.Renderer.Json.JSON3.StructTypes.Struct()
end

function Genie.Renderer.Json.JSON3.StructTypes.StructType(::Type{SearchLight.DbId})
    Genie.Renderer.Json.JSON3.StructTypes.Struct()
end

#SearchLight.Configuration.load(context = @__MODULE__)


# TODO figure out how to use env vars for this/ we have the dict now how to have SearchLight use it

SearchLight.connect(config)

# Function to check if the schema_migrations table exists
# This is hacky and I'd love to know if a better way exists.
# One way would be to use information_schema.tables but that
# Doesn't exist with sqlite and instead I would need to use sqlite_master
# As far as I know SearchLight does not have an abstracted
# Function that can do this logic however there documentaion is limited.
function table_exists(table_name::String)::Bool
    try
        # Attempt a query that will only succeed if the table exists
        query = """
        SELECT COUNT(*) 
        FROM $table_name 
        LIMIT 1;
        """
        SearchLight.query(query)

        # If the query succeeds, the table exists
        return true
    catch _
        return false
    end
end


# Initialize schema_migrations if it does not exist
function safe_init()
    if !table_exists("schema_migrations")
        SearchLight.Migrations.init()
        # Apply all migrations
        SearchLight.Migrations.allup()
        # Print migration status
        SearchLight.Migrations.status()
    end
end

safe_init()